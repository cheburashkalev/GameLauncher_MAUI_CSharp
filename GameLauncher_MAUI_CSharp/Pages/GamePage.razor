@page "/GamePage"
@using LiteDB;
@if (true)
{

    <img src="@GamePageInfo.Base64Image1280_540" style=" margin: 0px;
    width: 100%;
    -webkit-mask-image: linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 50%, rgba(0,212,255,0) 100%);
opacity: 0.3;
position:fixed;" />
    
    <div style="position:absolute; width:100%;height:100%;background-color:#00000080;display: flex;justify-content: center;align-items: center;@VisibilityDownloadMenu">
        <div style="border-radius:0.7rem;background-color:#1f2026;min-width:600px; min-height: 250px; max-width: 800px;">
            <div style="display: flex;
    font-family: 'Inter-Medium';
    align-items: center;
    padding: 15px;
    font-size: 20px;
    flex-direction: column;">
                Choose location for install
                <select style="border: 0px solid #FFFFFF;
    border-radius: 16px;
    width: 90%;
    height: 40px;
    background: transparent;
    background-color: #232532;
    color: white;
    font-family: 'Inter-Medium';
    font-size: large;
    margin-top: 5%;" @bind="SelectedDiskForDownload">
                    @if (LibrarysInfo != null)
                    {
                        foreach (var disk in LauncherApp.GetAllDisks())
                        {
                            var library = LibrarysInfo.ToList().Find(x => x["RootDirectory"].AsString == disk.RootDirectory);
                            if (library != null)
                            {
                                if (FirstSetup)
                                {
                                    SelectedDiskForDownload = library["_id"].AsObjectId.ToString();
                                    FirstSetup = false;
                                }
                                string content = GetNameDisk(disk.Name) + " (" + disk.RootDirectory + ") " + FormatSpaceStorage(disk.AvailableSpaceBytes, disk.SizeBytes);
                                <option value="@library["_id"].AsObjectId.ToString()" style="background-color:#2f313c">
                                    @content
                                </option>
                            }
                        }
                    }
                </select>
                <div style=" width: 90%;
                 padding-top: 12%;
                 display: flex;
                 justify-content: space-between;
                 flex-direction: row;">
                    <button class="btn btn-primary" style="
    width: 40%;" @onclick="StartDownload">
                        OK
                    </button>
                    <button class="btn btn-primary" style="
    width: 40%;" @onclick="CloseMenuDownload">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div style="padding-left:3rem;
padding-top: 3rem;position:relative;flex-direction: column;display: flex;align-items: flex-start;">
    <label style="
font-family: 'Inter-Bold';
font-style: normal;
font-weight: 700;
font-size: 40px;
line-height: 39px;
padding-bottom:25px;
">
            @GameName
   </label>
        <div style="position: relative;
    display: flex;
    align-items: center;">

        @if (ProgramDownloading)
        {
        <button class="btn btn-primary" style=" display: flex;align-items: center; font-family: 'Inter-Medium';	text-transform: uppercase; font-size: 16px;">
            
                <div class="LoadingAnim1">
                    <div class="bars">
                    <div class="bar"></div>
                    <div class="bar"></div>
                    <div class="bar"></div>
                    <div class="bar"></div>
                </div>
                <div class="bars">
                    <div class="bar"></div>
                    <div class="bar"></div>
                    <div class="bar"></div>
                    <div class="bar"></div>
                </div>
            </div>
                <div style="padding-left:10px">
                    Pause
                </div>
            </button>
                <div style="margin-left:10px;font-family: 'Inter-Medium';font-size:small">

                    DOWNLOADING
                    <div class="progress" style="width:150px;height:7px">
                        <div class="progress-value" style="position: absolute;
    background-color: #3f619b;
width:@ProgressDownloadPersent"></div>
                        <div class="progress-value" style="position: absolute;background-color: #598ee7; width:@ProgressCombinePersent"></div>
                    </div>
                    <div>
                        @FormatDownloadStorage(Downloaded,GameSize())
                    </div>

                </div>
        }
        else
        {
                <button @onclick="OpenDownloadMenu" class="btn btn-primary" style=" display: flex;align-items: center; font-family: 'Inter-Medium';	text-transform: uppercase; font-size: 16px;">
            <img src="Resources\AppIcon\Downloadicon.svg" />
            <div style="padding-left:10px">
                Download
            </div>
            </button>
                <div style="margin-left:10px;font-family: 'Inter-Medium';font-size:small">

                    Space Requared
                <div>
                 @FormatBytes(GameSize())
                </div>
            </div>
        }
        </div>
    </div>
}

@code {
    string GameName = "Battle Chain";
    string VisibilityDownloadMenu = "visibility:collapse";
    bool ProgramDownloading { get; set; } = false;
    ObjectId SelectedDiskForDownloadObject = ObjectId.NewObjectId();
    string SelectedDiskForDownload { get { return SelectedDiskForDownloadObject.ToString(); } set { SelectedDiskForDownloadObject = new ObjectId(value); } }
    bool FirstSetup = true;
    long Downloaded = 0;
    string ProgressDownloadPersent = "0%";
    string ProgressCombinePersent = "0%";
    IEnumerable<BsonDocument>? LibrarysInfo;

    long GameSize()
    {
        long Size = 0;
        var PartsGame = GamePageInfo.Release.Assets.Where(x => x.Name.EndsWith(".dat") && x.Name.StartsWith("part"));
        if (PartsGame.Count() != 0)
        {
            foreach(var part in PartsGame)
            {
                Size += part.Size;   
            }
            return Size;
        }
        var GameCash = GamePageInfo.Release.Assets.First(x=>x.Name.EndsWith(".db") && x.Name.StartsWith("GameCashDB"));
        if (GameCash != null)
        {
            return GameCash.Size;    
        }
        return 0;
    }

    void OpenDownloadMenu()
    {
        VisibilityDownloadMenu = null;
    }
    string GetNameDisk(string? name)
    {
        return name != "" ? name : "Local Disk";
    }
    void StartDownload()
    {
        ProgressDownloadPersent = "0%";
        ProgressCombinePersent = "0%";
        var task = DownloadManagerS.DownloadGame(GamePageInfo.GameID, GamePageInfo.Release, SelectedDiskForDownloadObject);
        VisibilityDownloadMenu = "visibility:collapse";
    }
    void CloseMenuDownload()
    {
        VisibilityDownloadMenu = "visibility:collapse";
    }
    static string FormatSpaceStorage(long bytesFree, long bytesBusy)
    {
        return FormatBytes(bytesFree) + " FREE OF " + FormatBytes(bytesBusy);
    }
    static string FormatDownloadStorage(long bytesDownload, long bytesSizeGame)
    {
        return FormatBytes(bytesDownload) + " OF " + FormatBytes(bytesSizeGame);
    }
    static string FormatBytes(long bytes)
    {
        // Определяем единицы измерения и соответствующие делители
        string[] units = { "B", "KB", "MB", "GB", "TB", "PB" };
        long[] dividers = { 1, 1024, 1024 * 1024, 1024 * 1024 * 1024, 1024L * 1024 * 1024 * 1024, 1024L * 1024 * 1024 * 1024 * 1024 };

        // Находим подходящую единицу измерения
        int unitIndex = 0;
        while (unitIndex < units.Length - 1 && bytes >= dividers[unitIndex + 1])
        {
            unitIndex++;
        }

        // Вычисляем значение в выбранной единице измерения
        double value = (double)bytes / dividers[unitIndex];

        // Форматируем строку с двумя знаками после запятой и единицей измерения
        return $"{value:F2} {units[unitIndex]}";
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (LibrarysInfo == null)
            {
                var FindedGameDownloader = DownloadManagerS.DownloadList.FirstOrDefault(x => x.Key.Gameid == GamePageInfo.GameID);
                DownloadManagerS.DownloadGameStart += BindDownloadStart;
                DownloadManagerS.DownloadGameComplite += BindDownloadEnd;
                DownloadManagerS.DownloadProgressChanged += BindDownloadProgress;
                DownloadManagerS.CombineFileStart += (o, e) => 
                {
                    if (e.GameId == GamePageInfo.GameID)
                    {
                        ProgramDownloading = true;
                        InvokeAsync(() => StateHasChanged());
                    }
                };
                DownloadManagerS.CombineFileComplite += (o, e) =>
                {
                    if (e.GameId == GamePageInfo.GameID)
                    {

                    }
                };
                DownloadManagerS.CombineFileProgress += (o, e) =>
                {
                    if (e.GameId == GamePageInfo.GameID)
                    {
                        ProgramDownloading = true;
                        var SortedParts = DownloadManagerS.GetSortedPartsGame(GamePageInfo.Release.Assets);
                        long DownloadedLoc = 0;
                        long size = 0;
                        if (e.Part == 0)
                        {
                            size = SortedParts[0].Size;
                            DownloadedLoc = size * e.ProgressPercent / DownloadManagerS.GameSize(GamePageInfo.Release.Assets);
                            ProgressCombinePersent = DownloadedLoc.ToString() + "%";
                            return;
                        }
                        else
                        {
                            for (int i = 0; i != e.Part; i++)
                            {
                                size = SortedParts[i].Size;
                                DownloadedLoc += size * 100 / DownloadManagerS.GameSize(GamePageInfo.Release.Assets);
                            }
                            size = SortedParts[e.Part].Size;
                            DownloadedLoc += size * e.ProgressPercent / DownloadManagerS.GameSize(GamePageInfo.Release.Assets);
                            ProgressCombinePersent = DownloadedLoc.ToString() + "%";
                            return;
                        }
                        
                    }
                };
                if (FindedGameDownloader.Value != null)
                {
                    ProgramDownloading = true;
                }
                LibrarysInfo = LauncherApp.GetGameLibrarys();
                PeriodicTimer timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
                while (await timer.WaitForNextTickAsync())
                {
                    if (ProgramDownloading)
                        await InvokeAsync(() => StateHasChanged());
                }


            }
        }

    }
    void BindDownloadStart(object? o, DownloadManagerS.DownloadGameStartEventArgs args)
    {
        if (args.GameId == GamePageInfo.GameID)
        {
            ProgramDownloading = true;
            InvokeAsync(() => StateHasChanged());

        }
    }
    void BindDownloadEnd(object? o, DownloadManagerS.DownloadGameCompliteEventArgs args)
    {
        if (args.GameId == GamePageInfo.GameID)
        {
            ProgramDownloading = false;
            InvokeAsync(() => StateHasChanged());
        }
    }
    void BindDownloadProgress(object? o, DownloadManagerS.DownloadGameProgressEventArgs args)
    {
        if (args.GameId == GamePageInfo.GameID)
        {
            long DownloadedLoc = 0;
            if (args.Part == 0)
            {

                DownloadedLoc = args.DownloadProgressArgs.ReceivedBytesSize;

            }
            else 
            {
                var SortedParts = DownloadManagerS.GetSortedPartsGame(GamePageInfo.Release.Assets);
                for (int i = 0; i != args.Part;i++)
                {
                    DownloadedLoc += SortedParts[i].Size;
                }

                DownloadedLoc += args.DownloadProgressArgs.ReceivedBytesSize;


            }
            Downloaded = DownloadedLoc;
            long persent = (Downloaded / (GameSize()/100));
            ProgressDownloadPersent = persent.ToString() + "%";
            
            

        }
    }
}
