@using LiteDB;
<div style="height:180px;width:100%;background-color:#00000031;padding:1rem;display: flex;font-family: 'Inter-Bold';">
    <img style="background-color:aliceblue;width:100px;height:150px;border-radius:10px;min-height:150px;min-width:100px;"/>
    <div style="padding-left:2rem;width: 80%;">
    Batle Chain
        <div style="margin-top:2rem;display:flex;align-items: center;">
        <div class="progress" style="width:80%" >
                <div class="progress-value" style="position: absolute;
    background-color: #3f619b;width:@ProgressDownloadPersent"> </div>
                <div class="progress-value" style="position: absolute;
    background-color: #598ee7;width:@ProgressCombinePersent"> </div>
        </div>
        <div style="padding-left:10px">
                <button style="background:url(../../Resources/AppIcon/pauseicon.svg) no-repeat;background-position: center center;width:15px;height:15px;border: 1.5px solid #2869FF;border-radius:3px">

            </button>
                <button style="background:url(../../Resources/AppIcon/stopicon.svg) no-repeat;background-position: center center;width:15px;height:15px;border: 1.5px solid #2869FF;border-radius:3px">
                </button>
        </div>
     </div>
        <div style="padding-top:0.5rem;display: flex;
    justify-content:space-between;width:80%">
            <div style=" display: flex;
    justify-content: flex-start;">
        Downloading...
            </div>
            <div style=" display: flex;
    justify-content: flex-end">
                @ProgressDownloadPersent
            </div>
         
    </div>
    </div>
 
</div>

@code {
    [Parameter]
    public ObjectId GameId { get; set; }
    long Downloaded = 0;
    string ProgressDownloadPersent = "0%";
    string ProgressCombinePersent = "0%";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (GameId != null)
            {
                DownloadManagerS.DownloadGameStart += BindDownloadStart;
                DownloadManagerS.DownloadGameComplite += BindDownloadEnd;
                DownloadManagerS.DownloadProgressChanged += BindDownloadProgress;
                DownloadManagerS.CombineFileStart += (o, e) =>
               {
                   if (e.GameId == GamePageInfo.GameID)
                   {
                       
                   }
               };
                DownloadManagerS.CombineFileComplite += (o, e) =>
                {
                    if (e.GameId == GamePageInfo.GameID)
                    {

                    }
                };
                DownloadManagerS.CombineFileProgress += (o, e) =>
                {
                    if (e.GameId == GamePageInfo.GameID)
                    {
                        
                        var SortedParts = DownloadManagerS.GetSortedPartsGame(GamePageInfo.Release.Assets);
                        long DownloadedLoc = 0;
                        long size = 0;
                        if (e.Part == 0)
                        {
                            size = SortedParts[0].Size;
                            DownloadedLoc = size * e.ProgressPercent / DownloadManagerS.GameSize(GamePageInfo.Release.Assets);
                            ProgressCombinePersent = DownloadedLoc.ToString() + "%";
                            return;
                        }
                        else
                        {
                            for (int i = 0; i != e.Part; i++)
                            {
                                size = SortedParts[i].Size;
                                DownloadedLoc += size * 100 / DownloadManagerS.GameSize(GamePageInfo.Release.Assets);
                            }
                            size = SortedParts[e.Part].Size;
                            DownloadedLoc += size * e.ProgressPercent / DownloadManagerS.GameSize(GamePageInfo.Release.Assets);
                            ProgressCombinePersent = DownloadedLoc.ToString() + "%";
                            return;
                        }

                    }
                };
                PeriodicTimer timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
                while (await timer.WaitForNextTickAsync())
                {
                    
                        await InvokeAsync(() => StateHasChanged());
                }
            }
        }
    }
    void BindDownloadStart(object? o, DownloadManagerS.DownloadGameStartEventArgs args)
    {
        if (args.GameId == GameId)
        {
            //InvokeAsync(() => StateHasChanged());
        }
    }
    void BindDownloadEnd(object? o, DownloadManagerS.DownloadGameCompliteEventArgs args)
    {
        if (args.GameId == GameId)
        {

            // InvokeAsync(() => StateHasChanged());
        }
    }
    void BindDownloadProgress(object? o, DownloadManagerS.DownloadGameProgressEventArgs args)
    {
        if (args.GameId == GameId)
        {
            long DownloadedLoc = 0;
            if (args.Part == 0)
            {

                DownloadedLoc = args.DownloadProgressArgs.ReceivedBytesSize;

            }
            else
            {
                var SortedParts = DownloadManagerS.GetSortedPartsGame(GamePageInfo.Release.Assets);
                for (int i = 0; i != args.Part; i++)
                {
                    DownloadedLoc += SortedParts[i].Size;
                }

                DownloadedLoc += args.DownloadProgressArgs.ReceivedBytesSize;


            }
            Downloaded = DownloadedLoc;
            long persent = (Downloaded / (DownloadManagerS.GameSize(args.GameAssets) / 100));
            ProgressDownloadPersent = persent.ToString() + "%";
        }
    }
}
