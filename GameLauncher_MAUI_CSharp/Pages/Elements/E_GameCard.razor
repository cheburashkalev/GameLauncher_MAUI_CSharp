@inject IJSRuntime JsRuntime;
@inject HttpClient Http;
@using LiteDB;
<li class="@classAnim" id=@boxid style="display:inline-block; padding-right:1rem;">
    <canvas id=@Canvasid style="border-radius:5px; margin: 0px;
    width: 200px;
    height: 300px;
    justify-content: center;
    display: flex;
    align-items: center;
    position: center;
opacity:@opacity">
</canvas>
<label style="opacity:@opacity">
    @NameGame
</label>
</li>
@code {
    [Parameter]
    public string url{ get; set; }
    [Parameter]
    public string NameGame { get; set; }
    public ObjectId id = ObjectId.NewObjectId();
    public ObjectId idCanvas = ObjectId.NewObjectId();
    string boxid { get { return url + id.ToString(); } }
    string Canvasid { get { return url + idCanvas.ToString(); } }
    private string classAnim;
    private int opacity = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetImageAsync(url, Canvasid);
        }
    }
    private async Task<Stream> GetImageStreamAsync(string ImageURL)
    {
        return await Http.GetStreamAsync(
            ImageURL);
    }

    private async Task SetImageAsync(string ImageURL, string id)
    {

        var imageStream = await GetImageStreamAsync(ImageURL);
        var dotnetImageStream = new DotNetStreamReference(imageStream);

        await JsRuntime.InvokeVoidAsync("setImage3", id, dotnetImageStream);
        classAnim = "animate__fadeInLeft animate__faster animate__animated";
        opacity = 1;
        StateHasChanged();
    }
}
