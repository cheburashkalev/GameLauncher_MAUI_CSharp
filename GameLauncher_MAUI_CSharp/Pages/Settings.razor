<ul class="prev-next" style="align-items:center; display: flex; justify-content: space-between;padding-left:unset">
    <li style="display: flex; ">
        <h1>Settings</h1>
    </li>
    <li style="display: block; ">
        <button class="btn btn-primary ">SingIn</button>
    </li>
</ul>


@LauncherApp.test
@page "/Settings"
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations;
@inject ILogger<Settings> Logger
@inject IJSRuntime JsRuntime;


@if (LauncherApp.db.CollectionExists("Repositories"))
{
    exampleModel.Clear();
    @foreach (var item in LauncherApp.db.GetCollection<Repositories>("Repositories").FindAll())
    {
        RepModel repModel = new();
        repModel.RepId = item.RepId;
        exampleModel.Add(repModel);
        string modFormUser = "form-control";
        string modFormRep = "form-control";
        <EditForm id="@repModel.RepId" Model="@exampleModel" style="padding-bottom:20px;" >
            <DataAnnotationsValidator />
            <ValidationSummary />
            <input class="@modFormUser" style="width:30%;display:inline-block;" @bind-value="repModel.NameB" />
            <input class="@modFormRep" style="width:30%;display:inline-block;" @bind-value="repModel.repB" />
           
        </EditForm>
        if (repModel.NameB != null)
        {
            IsUserNameValidAttribute a = new();
            if (a.IsValid(repModel.NameB))
                modFormUser = "form-control modified valid";
            else modFormUser = "form-control modified invalid";
        }
        else modFormRep = "form-control modified invalid";
        if (repModel.repB != null)
        {
            IsRepValidAttribute a = new("NameB");
            var b = new ValidationContext(repModel);
            if (a.CisValid(repModel.repB, b) == null)
                modFormRep = "form-control modified valid";
            else modFormRep = "form-control modified invalid";
        }
        else modFormRep = "form-control modified invalid";

    }
    
}
else
{
    exampleModel.Clear();
    NewRepClicked();
}

<button class="btn btn-primary" @onclick="NewRepClicked">Add Rep</button>

@code {
    private List<RepModel> exampleModel = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            foreach (var rep in exampleModel)
            {

                   // await JsRuntime.InvokeVoidAsync("eval", new object[] {$"document.getElementById(\"{rep.RepId}\").submit() " });

            }
        }
    }
    void NewRepClicked()
    {
        RepModel repModel = new();
        repModel.NameB = " ";
        repModel.repB = " ";
        StateHasChanged();

    }
    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        // Process the valid form
    }
}
