
@page "/Settings"
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations;
@using System.Diagnostics;
@using GameLauncher_MAUI_CSharp.Pages.Elements;
@inject ILogger<Settings> Logger
@inject IJSRuntime JsRuntime
@LauncherApp.test
<div style="min-height:100%">
<ul class="prev-next" style="align-items:center; display: flex; justify-content: space-between;padding-left:unset">
    <li style="display: flex; ">
        <h1>Settings</h1>
    </li>
    <li style="display: block; ">
        <button id="button_log" class="btn btn-primary" @onclick="SingIn" >
                @SingButtonText
            </button>
    </li>
</ul>





@if (LauncherApp.db.CollectionExists("Repositories"))
{
    exampleModel.Clear();
    @foreach (var item in LauncherApp.db.GetCollection<Repositories>("Repositories").FindAll())
    {
        RepModel repModel = new();
        repModel.RepId = item.RepId;
        exampleModel.Add(repModel);
            <E_RepForm model=repModel></E_RepForm>

    }
    
}
else
{
    exampleModel.Clear();
    NewRepClicked();
}

<button class="btn btn-primary" @onclick="NewRepClicked">Add Rep</button>
</div>
@code {
    private string? SingButtonText = !(TorrentDownloader.client.Credentials == Credentials.Anonymous) ? "Log Out" : "log In";
    private List<RepModel> exampleModel = new();


    void SingIn()
    {
        if (!(TorrentDownloader.client.Credentials == Credentials.Anonymous))
        {
            TorrentDownloader.DeliteTokenGitHub();
        }
        else
        {
            Process.Start(new ProcessStartInfo($"https://github.com/login/oauth/authorize?client_id={LauncherApp.GITHUB_CLIENT_ID}&redirect_uri={LauncherApp.redirect_uri}") { UseShellExecute = true });

        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        TorrentDownloader.TokenRecive = с_TokenReciveEvent;

    }
    void с_TokenReciveEvent(object sender, TokenReciveEventArgs e) 
    {
       try
        {
            SingButtonText = !(TorrentDownloader.client.Credentials == Credentials.Anonymous) ? "Log Out" : "log In";
            // use this if engine idiot
            InvokeAsync(() => StateHasChanged());
        }
        catch(Exception ex)
        {
            
        }

    }
    void NewRepClicked()
    {
        RepModel repModel = new();
        repModel.NameB = " ";
        repModel.repB = " ";
        StateHasChanged();

    }
    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        // Process the valid form
    }
}
