@page "/Browse"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject HttpClient Http

<h1>Browse</h1>

<p role="status">Current count: @currentCount</p>
<p role="status">Current response: @response</p>
<button class="btn btn-primary" href="" @onclick="IncrementCount">Click me</button>


<div class="fixed-bottom">
<div class="container-fluid">
        <div class="row">
            <div class="col-3"></div>
            <div class="col-8">
                <p></p>
                Loading Blazor WebAssembly...
                <br />
                <div class="progress">
                    <div id="progressbar" class="progress-bar progress-bar-striped active" role="progressbar" style="width:@width"></div>
                </div>
            </div>
            <div class="col-2"></div>
        </div>
</div>
<p></p>
              
<br />
</div>
<ul class="flex-container">
    @foreach (var project in filesInReliase)
    {
        var file = project.FirstOrDefault();

        if (file.URL_PNG_3_2 != null)
            {
            /* string a = $"background-image:url(\"{file.URL_PNG_3_2}\")";*/
            /* style =@ a*/
            string boxid = file.URL_PNG_3_2 + "_BOX";
            <li class="box" id=@boxid style="opacity:1;">
                <canvas id=@file.URL_PNG_3_2 style="border-radius:5px; margin: 0px;
    width: 200px;
    height: 300px;
    justify-content: center;
    display: flex;
    align-items: center;
    position: center;
opacity:1"> </canvas>
           
            </li>

    
        }
    }
</ul>
    
@code {
    private int currentCount = 0;
    private string response ="null";
    private string width = "";
    private List<string> imageSource=new();
    private List<List<FilesInReliase>> filesInReliase = TorrentDownloader.GetInfoReliases();

    private void IncrementCount()
    {
        Global.MaxNumberOfItems++;
        width = "50%";
        currentCount = Global.MaxNumberOfItems;
    }
 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var project in filesInReliase)
            {
                var file = project.FirstOrDefault();
                if (file.URL_PNG_3_2 != null)
                {
                    await SetImageAsync(file.URL_PNG_3_2, file.URL_PNG_3_2);
                }
            }
        }
    }
    private async Task<Stream> GetImageStreamAsync(string ImageURL)
    {
        return await Http.GetStreamAsync(
            ImageURL);
    }

    private async Task SetImageAsync(string ImageURL, string id)
    {

        var imageStream = await GetImageStreamAsync(ImageURL);
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JsRuntime.InvokeVoidAsync("setImage3", id, dotnetImageStream);
        try
        {
            await JsRuntime.InvokeVoidAsync("eval", new object[] {
            $"document.getElementById(\"{id}_BOX\").style.animation = \"anime 3s cubic-bezier(0.16, 1, 0.3, 1) 1s alternate\" " });
        }
        catch
        {
            
        }
    }
}
